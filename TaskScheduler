/*
Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.
Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.
However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.
You need to return the least number of intervals the CPU will take to finish all the given tasks.
Example:

Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.

Note:

The number of tasks is in the range [1, 10000].
The integer n is in the range [0, 100].
*/
class Solution {
    static class Task {
        int priority;
        char task;
        int time;
        public Task(char task, int priority) {
            this.task = task;
            this.priority = priority;
            this.time = 0;
        }
    }

    public int leastInterval(char[] tasks, int n) {
        //preprocess
        List<Task> taskList = groupTasks(tasks);

        PriorityQueue<Task> q = new PriorityQueue<Task>(taskList.size(), new Comparator<Task>() {
            public int compare(Task t1, Task t2) {
                return t2.priority - t1.priority;
            }
        });
        for (Task t : taskList) {
            q.add(t);
        }
        /*
          can not just use one set, otherwise it will cause exception of modifying collection while iterating
        */
        Set<Task> waitSet = new HashSet<>();
        Set<Task> toAddSet = new HashSet<>();
        int time = 0;
        while (q.size()> 0 || waitSet.size() > 0) {
            time++;
            if (q.size() > 0) {
                Task t = q.poll();
                t.priority--;
                t.time = time;
                if (t.priority > 0) {
                    waitSet.add(t);
                }
            }
            for (Task t : waitSet) {
                if (time - t.time >= n) {
                    toAddSet.add(t);
                }
            }
            for (Task t : toAddSet) {
                waitSet.remove(t);
                q.add(t);
            }
            toAddSet.clear();
        }
        return time;
    }

    private List<Task> groupTasks(char[] tasks) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : tasks) {
            if (!map.containsKey(c)) {
                map.put(c, 0);
            }
            map.put(c, map.get(c) + 1);
        }
        List<Task> res = new ArrayList<>();
        for (Character c: map.keySet()) {
            Task t = new Task(c, map.get(c));
            res.add(t);
        }
        return res;
    }
}
