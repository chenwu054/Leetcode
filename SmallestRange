/*
632. Smallest Range
You have k lists of sorted integers in ascending order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a,b] is smaller than range [c,d] if b-a < d-c or a < c if b-a == d-c.

Example 1:
Input:[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]
Output: [20,24]
Explanation:
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Note:
The given list may contain duplicates, so ascending order means >= here.
1 <= k <= 3500
-105 <= value of elements <= 105.
For Java users, please note that the input type has been changed to List<List<Integer>>. And after you reset the code template, you'll see this point.
*/
class Solution {
    static class Tuple {
        Integer value;
        Integer numsIndex;
        Integer listIndex;
        public Tuple(Integer value, Integer listIndex, Integer numsIndex) {
            this.value = value;
            this.numsIndex = numsIndex;
            this.listIndex = listIndex;
        }
    }
    public int[] smallestRange(List<List<Integer>> nums) {
        int k = nums.size();
        PriorityQueue<Tuple> q = new PriorityQueue<>(k, new Comparator<Tuple>() {
            public int compare(Tuple a, Tuple b) {
                return a.value - b.value;
            }
        });
        int i = 0;
        int max = Integer.MIN_VALUE;
        for (List<Integer> list : nums) {
            if (list.size() > 0) {
                Tuple t = new Tuple(list.get(0), 0, i);
                q.offer(t);
                max = Math.max(max, list.get(0));
            }
            i++;
        }
        int start = 0;
        int end = Integer.MAX_VALUE;
        while(!q.isEmpty()) {
            Tuple t = q.peek();
            if (max - t.value < end - start && q.size() == k) {
                end = max;
                start = t.value;
            }
            q.poll();
            if (t.listIndex + 1 < nums.get(t.numsIndex).size()) {
                q.offer(new Tuple(nums.get(t.numsIndex).get(t.listIndex + 1), t.listIndex + 1, t.numsIndex));
                max = Math.max(nums.get(t.numsIndex).get(t.listIndex + 1), max);
            }
        }
        return new int[]{start, end};

    }
}
